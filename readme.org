* Hy-Functional: Functional library for Hy

Inspired by Clojure.

** Macros

*** comment

#+begin_src hy
  (require
    hf [comment])

  (defn add [x y]
    (+ x y))

  ;; Ignore body when compile.
  ;; Writing some tests for repl or rct.
  (comment
    (add 1 2) ; => 3
    (add 1 3) ; => 4
    )
#+end_src

*** ignore

#+begin_src hy
  (require
    hf [ignore])

  (defn log-error [msg]
    ;; Ignore body return value.
    (ignore
      (print msg)))
#+end_src

*** if-not when-not

#+begin_src hy
  (require
    hf [if-not when-not])

  (defn f [opts]
    ;; Reverse branch of if, short first for readability.
    (if-not opts
            (short-form)
            (long-form
              process-opts
              ...)))

  (defn f [success?]
    ;; Reverse branch of when.
    (when-not success?
              (raise ...)))
#+end_src

*** def

#+begin_src hy
  (require
    hf [def])

  ;; Alias of setv, used in top level.
  (def x 1)
#+end_src

#+begin_src hy
  (require
    hf [defarity])

  ;;; Clojure like fn def for varargs.
  (defarity reduce
    ([f iterable]
      ...)
    ([f init iterable]
      ...))
#+end_src

#+begin_src hy
  (require
    hf [-> ->>])

  (import
    hf)

  ;; For nested object transformation.
  (-> {}
      (hf.assoc "a" 1 "b" 2)
      (hf.update "a" hf.inc))

  ;; equiv: (hf.update (hf.assoc {} "a" 1 "a" 2) "a" hf.inc)
  ;; => {"a" 2 "b" 2}

  ;; For nexted seq transformation.
  (->> (range 4)
       (map hf.inc)
       (filter hf.even?)
       (hf.reduce +))

  ;; equiv: (hf.reduce + (filter hf.even? (map hf.inc (range 4))))
  ;; => 6
#+end_src

#+begin_src hy
  (require
    hf [doto])

  ;; For impure object method calls.
  (doto []
        (.append 1)
        (.extend [2 3]))

  ;; equiv: (let [$ []] (.append $ 1)  (.extend $ [2 3]) $)
#+end_src

#+begin_src hy
  (require
    hf [cond-> cond->>])

  (import
    hf)

  ;; Easy opts processing.

  (defn f [opt1 opt2]
    (cond-> {}
            opt1 (hf.assoc "opt1" ...)
            opt2 (hf.assoc "opt2" ...)))

  (defn g [opt1 opt2]
    (cond-> []
            opt1 (hf.conj "opt1" ...)
            opt2 (hf.conj "opt2" ...)))
#+end_src

*** loop

#+begin_src hy
  (require
    hf [loop])

  ;; Clojure like loop.
  (loop [i 0]
        (if (> i 10)
            i
            (recur (<< i 1))))
  ;; => 16

  ;; Loop with yield.
  (loop [i 0]
        (if (> i 10)
            i
            (do
              (yield i)
              (recur (<< i 1)))))
  ;; => 1, 2, 4, 8, 16
#+end_src

** Basic

#+begin_src hy
  ;; None pred.
  (hf.none? None) ; => True
  (hf.none? []) ; => False
  (hf.some? None) ; => False
  (hf.some? []) ; => True

  ;; Int utils.
  (hf.inc 1) ; => 2
  (hf.dec 2) ; => 1
  (hf.zero? 0) ; => True
  (hf.pos? 1) ; => True
  (hf.neg? -1) ; => True
  (hf.even? 2) ; => True
  (hf.odd? 1) ; => True
#+end_src

** Func

*** ignore

#+begin_src hy
  (defn f [callback]
    (let [res ...]
      (callback res)))

  ;; Accept any args, do nothing.
  (f :callback hf.ignore)

  ;; Cons a new fn like ignore with spec return value.
  (f :callback (hf.constantly :error))
#+end_src

*** comp

#+begin_src hy
  ;; Return arg directly.
  (hf.identity 1) ; => 1

  ;; Unit of fn mult.
  (hf.identity (f x)) ; => (f x)

  ;; Fn mult.
  ((hf.comp hf.inc hf.inc) 1) ; => 3
  ((hf.comp hf.inc hf.inc hf.inc) 1) ; => 4
#+end_src

*** partial

#+begin_src hy
  ;; Partially bind args to fn.
  (setv add-1-2-* (hf.partial hy.pyops.+ 1 2))
  (add-1-2-* 3) ; => 6

  ;; Curry the fn.
  (setv add-1-*-* (hf.curry 3 hy.pyops.+ 1))
  (add-1-*-* 2 3) ; => 6
  ((add-1-*-* 2) 3) ; => 6
#+end_src

*** complement

#+begin_src hy
  (filter hf.even? (range 6)) ; => 0, 2, 4

  ;; Reverse pred result.
  (filter (hf.complement hf.even?) (range 6)) ; => 1, 3, 5
#+end_src

** Iter

*** map filter reduce

#+begin_src hy
  ;; Reduce seq to result by reducing fn: acc, input => acc.
  (hf.reduce hy.pyops.+ 1 (range 4)) ; => 10
  (hf.reduce hy.pyops.+ (range 4)) ; => 9

  ;; Reverse of filter.
  (hf.remove hf.even? (range 6)) ; => 1, 3, 5
#+end_src

*** cat

#+begin_src hy
  ;; Concat seqs.
  (hf.concat [1 2] [3 4]) ; => 1, 2, 3, 4
  (hf.concat [1] [2 3] [4]) ; => 1, 2, 3, 4

  ;; Concat seqs from seq, for undetermined (even infinite) inputs.
  (hf.cat [[1 2] [3 4]]) ; => 1, 2, 3, 4
  (hf.cat [[1] [2 3] [4]]) ; => 1, 2, 3, 4

  ;; Concat one object before seq.
  (hf.cons 1 [2 3]) ; => 1, 2, 3

  ;; Concat result of maps.
  (hf.mapcat range [1 2 3]) ; => 0, 0, 1, 0, 1, 2
#+end_src

*** first rest empty?

#+begin_src hy
  ;; First of seq.
  (hf.first [1 2 3]) ; => 1
  (hf.first (range 3)) ; => 0
  (hf.first []) ; => None
  (hf.first (range 0)) ; => None
  (hf.first None) ; => None

  ;; Rest of seq.
  (hf.rest [1 2 3]) ; => 2, 3
  (hf.rest (range 3)) ; => 1, 2
  (hf.rest []) ; => None
  (hf.rest (range 0)) ; => None
  (hf.rest [1]) ; => <empty>
  (hf.rest (range 1)) ; => <empty>
  (hf.rest None) ; => None

  ;; Is seq empty?
  (hf.empty? [1 2 3]) ; => False
  (hf.empty? (range 3)) ; => False
  (hf.empty? []) ; => True
  (hf.empty? (range 0)) ; => True
  (hf.empty? None) ; => True

  ;; Second of seq.
  (hf.second [1 2]) ; => 2
  (hf.second [1]) ; => None
  (hf.second []) ; => None
  (hf.second (range 3)) ; => 1
  (hf.second (range 1)) ; => None
  (hf.second (range 0)) ; => None
  (hf.second None) ; => None

  ;; Last of seq.
  (hf.last [1 2 3]) ; => 3
  (hf.last []) ; => None
  (hf.last None) ; => None

  ;; Seq without last.
  (hf.butlast [1 2 3]) ; => 2, 3
  (hf.butlast []) ; => <empty>
  (hf.butlast None) ; => <empty>
#+end_src

*** iterate

#+begin_src hy
  ;; iterate fn on a init value.
  (hf.iterate hf.inc 0) ; => 0, 1, 2, ...
  (hf.iterate hf.dec 0) ; => 0, -1, -2, ...

  ;; Repeat value.
  (hf.repeat 1) ; => 1, 1, 1, ...

  ;; Repeat fn.
  (hf.repeatedly auto) ; => auto-0, auto-1, auto-2, ...

  ;; Cycle in seq.
  (hf.cycle [1 2 3]) ; => 1, 2, 3, 1, 2, 3, ...
#+end_src

*** interleave

#+begin_src hy
  ;; Interleave shortest seqs.
  (hf.interleave [1 2 3] [4 5 6] [7 8 9 10]) ; => 1, 4, 7, 2, 5, 8, 3, 6, 9

  ;; Interpose sep to seq.
  (hf.interpose [0 [1 2 3]]) ; => 1, 0, 2, 0, 3
  (hf.interpose [0 [1]]) ; => 1,
  (hf.interpose [0 []]) ; => <empty>
#+end_src

** Coll

*** conj into

#+begin_src hy
  ;; Conjoin object to list.
  (hf.conj [1 2] 3) ; => [1 2 3]
  (hf.conj [1 2] 3 4) ; => [1 2 3 4]

  ;; Seqs into list.
  (hf.into [1 2] (range 3)) ; => [1 2 0 1 2]
#+end_src

*** assoc dissoc update merge

#+begin_src hy
  ;; Assoc dict of k to v.
  (hf.assoc {"a" 1} "b" 2) ; => {"a" 1 "b" 2}
  (hf.assoc {"a" 1} "b" 2 "c" 3) ; => {"a" 1 "b" 2 "c" 3}

  ;; Dissoc dict of k.
  (hf.dissoc {"a" 1 "b" 2} "b") ; => {"a" 1}
  (hf.dissoc {"a" 1 "b" 2} "a" "b") ; => {}

  ;; Update dict of k with f, and optional additional args.
  (hf.update {"a" 1 "b" 2} "a" hf.inc) ; => {"a" 2 "b" 2}
  (hf.update {"a" 1 "b" 2} "a" hy.pyops.+ 2) ; => {"a" 3 "b" 2}

  ;; Merge dicts to one dict.
  (hf.merge {"a" 1 "b" 2} {"b" 3 "c" 4} {"c" 5 "d" 6}) ; {"a" 1 "b" 3 "c" 5 "d" 6}
#+end_src

*** flatten

#+begin_src hy
  ;; Coll: iterable and not str or bytes.
  (hf.coll? "hello") ; => False
  (hf.coll? b"hello") ; => False
  (hf.coll? [1 2 3]) ; => True
  (hf.coll? #{1 2 3}) ; => True
  (hf.coll? (range 3)) ; => True

  ;; Flatten nested seq.
  (hf.flatten [1 2 [3 4 #{5 6} "hello"] "world"]) ; => 1, 2, 3, 4, 5, 6, "hello", "world"
#+end_src

*** group-by

#+begin_src hy
  ;; Group seqs by key fn.
  (hf.group-by even? (range 10)) ; => {True [0 2 4 6 8] False [1 3 5 7 9]}
  (hf.group-by (fn [x] (% x 3)) (range 10)) ; => {0 [0 3 6 9] 1 [1 4 7] [2 5 8]}
#+end_src

** Seq

TODO
